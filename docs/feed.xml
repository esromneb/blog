<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://esromneb.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://esromneb.github.io/blog/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-12-11T16:28:13-08:00</updated><id>https://esromneb.github.io/blog/feed.xml</id><title type="html">Ben Morse Blog</title><subtitle>My devblog. Typescript, Canvas, Phaser, Verilog, Startups.</subtitle><entry><title type="html">Docker COPY command trick to save space</title><link href="https://esromneb.github.io/blog/docker-copy-file-trick" rel="alternate" type="text/html" title="Docker COPY command trick to save space" /><published>2023-12-10T00:00:00-08:00</published><updated>2023-12-10T00:00:00-08:00</updated><id>https://esromneb.github.io/blog/docker-copy-file-trick</id><content type="html" xml:base="https://esromneb.github.io/blog/docker-copy-file-trick"><![CDATA[<h1 id="docker-and-files">Docker and Files</h1>
<p>Docker is great for setting up build environments. However if you are trying to make a docker with a pre-installed IDE or some other software, a problem emerges. How do you use the <code class="language-html highlighter-rouge">COPY</code> or <code class="language-html highlighter-rouge">ADD</code> commands without leaving behind a large and unwanted layer?</p>

<h1 id="multi-stage-builds-to-the-rescue">Multi-stage builds to the rescue</h1>

<p>Use this approach to save space and avoid any trace of the large <code class="language-html highlighter-rouge">.tar.gz</code> file in the history of your Docker.</p>

<pre><code class="language-Docker">FROM ubuntu:jammy-20230308 as builder

# copy large file in
COPY CCS12.5.0.00007_linux-x64.tar.gz /opt/CCS12.5.0.00007_linux-x64.tar.gz

# Do any extraction work
RUN cd /opt &amp;&amp; tar -xf CCS12.5.0.00007_linux-x64.tar.gz

###############################################################################
FROM ubuntu:jammy-20230308 as final

# Copy the extracted folder only
COPY --from=builder /opt/CCS12.5.0.00007_linux-x64 /opt/CCS12.5.0.00007_linux-x64

# And the rest of your docker file as normal
</code></pre>

<h1 id="results">Results</h1>
<p>A temporary docker stage, called <code class="language-html highlighter-rouge">builder</code> is created. The <code class="language-html highlighter-rouge">COPY</code> command is used here (which always leaves behind a layer). Then the contents are untarred. In this step you can do any additional steps that are required. Then, in <code class="language-html highlighter-rouge">final</code>, you only copy over the extracted folder. Note that you don’t need to delete the <code class="language-html highlighter-rouge">tar.gz</code>, as all layers from <code class="language-html highlighter-rouge">builder</code> are automatically deleted.</p>

<h1 id="further-background">Further Background</h1>
<p>The problem where <code class="language-html highlighter-rouge">COPY</code> and <code class="language-html highlighter-rouge">ADD</code> leave behind a layer is a significant one. Similar to <code class="language-html highlighter-rouge">git</code>, each layer that is left behind is a permanent record in the history of your docker. What this means is that if you create a large file in one layer, and then in the next layer you delete it, the docker’s size will permanently be larger, despite the deletion.</p>

<p>A new layer is created every time you have a new <code class="language-html highlighter-rouge">RUN</code> statement. You will often see tips online where you create a large, file, operate with it, and then delete it all within the same <code class="language-html highlighter-rouge">RUN</code> command. This approach works great if the file comes in via <code class="language-html highlighter-rouge">wget</code>, however the trick I’ve mentioned above is best if the source of the file is from <code class="language-html highlighter-rouge">COPY</code> or <code class="language-html highlighter-rouge">ADD</code>.</p>

<p>An additional optimization would be to run the full installation in the build stage, and only copy the final, installed files in the <code class="language-html highlighter-rouge">final</code> stage.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Docker and Files Docker is great for setting up build environments. However if you are trying to make a docker with a pre-installed IDE or some other software, a problem emerges. How do you use the COPY or ADD commands without leaving behind a large and unwanted layer?]]></summary></entry><entry><title type="html">Jest and JSVerify: Property Based Testing</title><link href="https://esromneb.github.io/blog/jest-and-jsverify-property-based-testing" rel="alternate" type="text/html" title="Jest and JSVerify: Property Based Testing" /><published>2023-03-25T00:00:00-07:00</published><updated>2023-03-25T00:00:00-07:00</updated><id>https://esromneb.github.io/blog/jest-and-jsverify-property-based-testing</id><content type="html" xml:base="https://esromneb.github.io/blog/jest-and-jsverify-property-based-testing"><![CDATA[<h1 id="jest">Jest</h1>
<p>Is probably a framework you’ve used if you are a <code class="language-html highlighter-rouge">nodejs</code> head.</p>

<h1 id="property-based-testing">Property Based Testing</h1>
<p>This is an approach where your tests pulls random numbers during it’s operation. The seed is controlled by the library and failing tests will spit the seed as a string. I use <a href="https://www.npmjs.com/package/jsverify">jsverify</a>.  If you want this in C++ use <a href="https://github.com/emil-e/rapidcheck">rapidcheck</a>.</p>

<h1 id="jest--jsverify">Jest + JSVerify</h1>
<p>Imagine you previously wrote <code class="language-html highlighter-rouge">workingFunction()</code> but it’s slow.  Now you want to replace it with <code class="language-html highlighter-rouge">experimentalReplacementForOldWorkingFunction()</code> but aren’t sure if all possible inputs map out correctly. This is how I would “Bake in” a randomized test to make sure my new function was working.  Eventually after this test is passing, you refactor the old function name and just put the new body in there. Of course you would need now to save the old, slow version (so this test can exist). I normally put this in the test file in question. No need for a shared include or access from your runtime anymore.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="c1">// works great</span>
<span class="kd">function</span> <span class="nx">workingFunction</span><span class="p">(</span><span class="nx">vin</span><span class="p">:</span> <span class="nx">Vec4</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// you just wrote this and aren't sure if it works for all inputs</span>
<span class="kd">function</span> <span class="nx">experimentalReplacementForOldWorkingFunction</span><span class="p">(</span><span class="nx">vin</span><span class="p">:</span> <span class="nx">Vec4</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">test if function replacement works for all inputs</span><span class="dl">'</span><span class="p">,</span> <span class="nx">done</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">jest</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    
    <span class="c1">// generate a random vector of length 4 over the range of [-1,1]</span>
    <span class="c1">// note if these get changed to 1E2 there are less possible vectors generated but it will</span>
    <span class="c1">// take fewer test runs to hit all possible values.</span>
    <span class="kd">const</span> <span class="nx">rv4</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Vec4</span><span class="o">&gt;</span><span class="p">[</span>
        <span class="nx">jsc</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span> <span class="mi">1</span><span class="nx">E3</span><span class="p">)</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span>
        <span class="nx">jsc</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span> <span class="mi">1</span><span class="nx">E3</span><span class="p">)</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span>
        <span class="nx">jsc</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span> <span class="mi">1</span><span class="nx">E3</span><span class="p">)</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span>
        <span class="nx">jsc</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">,</span> <span class="mi">1</span><span class="nx">E3</span><span class="p">)</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span>
      <span class="p">];</span>
    <span class="p">};</span>
    
    <span class="c1">// our ideal input</span>
    <span class="kd">let</span> <span class="nx">ideal</span> <span class="o">=</span> <span class="nx">rv4</span><span class="p">();</span>
    
    <span class="c1">// our expected output</span>
    <span class="kd">let</span> <span class="nx">expected</span> <span class="o">=</span> <span class="nx">workingFunction</span><span class="p">(</span><span class="nx">ideal</span><span class="p">);</span>
    
    <span class="c1">// our second output, in question</span>
    <span class="kd">let</span> <span class="nx">got</span> <span class="o">=</span> <span class="nx">experimentalReplacementForOldWorkingFunction</span><span class="p">(</span><span class="nx">ideal</span><span class="p">);</span>
    
    <span class="c1">// do the functions return the same number?</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">got</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expected</span><span class="p">);</span> 
    
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// wrap our lambda in this jsc thing. t wraps the call to body</span>
  <span class="kd">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">jsc</span><span class="p">.</span><span class="nx">forall</span><span class="p">(</span><span class="nx">jsc</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nx">body</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="na">props</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="p">{</span><span class="na">tests</span><span class="p">:</span> <span class="mi">1</span><span class="nx">E4</span><span class="p">};</span> <span class="c1">// 10k tests</span>
  <span class="c1">// const props: any = {tests: 1E2}; // run fewer tests</span>
  
  <span class="c1">// this is where we can put seeds</span>
  <span class="c1">// props.rngState = "031acbde5804f27639";</span>
  <span class="c1">// props.rngState = "077fd3ab6948015ce2";</span>
  
  <span class="c1">// actually run the test, run t which calls body</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">jsc</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">props</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  
  <span class="nx">done</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>]]></content><author><name></name></author><category term="programming" /><category term="TypeScript" /><category term="NodeJS" /><summary type="html"><![CDATA[Jest Is probably a framework you’ve used if you are a nodejs head.]]></summary></entry><entry><title type="html">Blog Notice</title><link href="https://esromneb.github.io/blog/gamedev/2023/03/11/hello-world.html" rel="alternate" type="text/html" title="Blog Notice" /><published>2023-03-11T00:00:00-08:00</published><updated>2023-03-11T00:00:00-08:00</updated><id>https://esromneb.github.io/blog/gamedev/2023/03/11/hello-world</id><content type="html" xml:base="https://esromneb.github.io/blog/gamedev/2023/03/11/hello-world.html"><![CDATA[<p>I guess this is a first post. The type of quality of posts you will see here will be absolute dirt-teir. Don’t expect working code or honestly anything. I guess I should copy the writing styles of other blogs and see if I can convey a cheery tone.</p>

<p>Please reply on twitter and link here to the page you are talking about!!</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kd">let</span> <span class="nx">base</span><span class="p">;</span>
<span class="nx">base</span> <span class="o">=</span> <span class="nx">Quaternion</span><span class="p">.</span><span class="nx">fromEuler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="dl">"</span><span class="s2">XYZ</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">base</span> <span class="o">=</span> <span class="nx">base</span><span class="p">.</span><span class="nx">mul</span><span class="p">(</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">fromEuler</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="dl">"</span><span class="s2">XYZ</span><span class="dl">"</span><span class="p">));</span></code></pre></figure>]]></content><author><name></name></author><category term="gamedev" /><summary type="html"><![CDATA[I guess this is a first post. The type of quality of posts you will see here will be absolute dirt-teir. Don’t expect working code or honestly anything. I guess I should copy the writing styles of other blogs and see if I can convey a cheery tone.]]></summary></entry></feed>